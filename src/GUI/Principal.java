/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.awt.Image;
import java.awt.TextField;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import merkeltree.MerkelTree;
import merkeltree.ObjectIO;

/**
 *
 * @author gonca
 */
public class Principal extends javax.swing.JFrame {
    //cira um objeto para servir de "Array" de elementos para a lista
    DefaultListModel<String> model = new DefaultListModel<>();
    //cria uma instancia da classe Merkel Tree
    MerkelTree mt = new MerkelTree();
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        //adiciona icon ao botao
        ImageIcon i = new javax.swing.ImageIcon(getClass().getResource("/resources/adicionar-ficheiro.png"));
        Image img = i.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        jButton1.setIcon(new ImageIcon(img));
        //adiciona icon ao botao
        i = new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"));
        img = i.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        jButton2.setIcon(new ImageIcon(img));
        //adiciona icon ao botao
        i = new javax.swing.ImageIcon(getClass().getResource("/resources/change.png"));
        img = i.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        jButton3.setIcon(new ImageIcon(img));
        //adiciona icon ao botao
        i = new javax.swing.ImageIcon(getClass().getResource("/resources/save-file.png"));
        img = i.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        jButton4.setIcon(new ImageIcon(img));
        //adiciona icon ao botao
        i = new javax.swing.ImageIcon(getClass().getResource("/resources/read-file.png"));
        img = i.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        jButton5.setIcon(new ImageIcon(img));
        //define o model da jList
        jList1.setModel(model);

       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Elemento");

        jTextField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField1.setDoubleBuffered(true);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 151, Short.MAX_VALUE))
            .addComponent(jTextField1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
        );

        jButton1.setText("Adicionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remover");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Alterar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Guardar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Ler");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Elementos");

        jTextPane1.setEditable(false);
        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            //verifica se o textField esta vazio
            if(!jTextField1.getText().isBlank()){
                //significa que está
                //adiciona o elemento ao model (jList)
                model.addElement(jTextField1.getText());
                //adiciona o elemento a arvore
                mt.add(jTextField1.getText());
                //limpa o textField
                jTextField1.setText("");
                //muda o index para -1 (nao selecionado)
                jList1.setSelectedIndex(-1);
                //requer o foco novamente
                jTextField1.requestFocus();
                //limpar o textPanel
                jTextPane1.setText("");
                //mostrar nova arvore
                jTextPane1.setText(mt.show());
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //verifica se esta algum valor selecionado na jList
        if(jList1.getSelectedIndex()!=-1){
            //significa que está
            //guarda o index do valor selecionado da lista em index
            int index=jList1.getSelectedIndex();
            //remove o elemento ao model (jList)
            model.remove(index);
            //remove o elemento da arvore
            mt.remove(index);
            //limpa o textField
            jTextField1.setText("");
            //muda o index para -1 (nao selecionado)
            jList1.setSelectedIndex(-1);
            //requer o foco novamente
            jTextField1.requestFocus();
            //limpar o textPanel
            jTextPane1.setText("");
            //mostrar nova arvore
            jTextPane1.setText(mt.show());
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //verifica se esta algum valor selecionado na jList
        if(jList1.getSelectedIndex()!=-1){
            //significa que está
            //verifica se o textField esta vazio 
            if(!jTextField1.getText().isBlank() && !jTextField1.getText().equals(jList1.getSelectedValue())){
                //significa que está
                //guarda o index do valor selecionado da lista em index
                int index=jList1.getSelectedIndex();
                String car =jTextField1.getText();
                //remove o elemento ao model (jList)
                model.remove(index);
                model.add(index, car);
                //remove o elemento da arvore
                mt.replace(index,car);
                //limpa o textField
                jTextField1.setText("");
                //muda o index para -1 (nao selecionado)
                jList1.setSelectedIndex(-1);
                //requer o foco novamente
                jTextField1.requestFocus();
                //limpar o textPanel
                jTextPane1.setText("");
                //mostrar nova arvore
                jTextPane1.setText(mt.show());
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        //cria uma instancia do tipo JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        //cria uma instancia do tipo FileNameExtensionFilter para criar um filtro, e limita para ficheiros do tipo mkt
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Merkel Tree file", "mkt");
        //determina que so sao aceites os ficheiros com o tipo do filtro
        fileChooser.setAcceptAllFileFilterUsed(false);
        //adiciona o filtro ao jFileChooser
        fileChooser.addChoosableFileFilter(filter);
        //abre o jFileChooser
        fileChooser.showSaveDialog(this);
        //cria uma instancia do tipo FIle
        File renamed2;
        //verifica se foi escolhido um ficheiro no JFileChooser
        if(fileChooser.getSelectedFile()!=null){
            //foi escolhido um ficheiro
            //verifica se o ficheiro contem a extensao .mkt
            if(!fileChooser.getSelectedFile().toString().contains(".mkt")){
                //significa que nao contem
                //cria um ficheiro novo com a extensao .mkt
                File renamed = new File(fileChooser.getSelectedFile().toString()+".mkt");
                //cria um ficheiro secundarioo para guaradar mais tarde o array de elementos
                renamed2 =new File(fileChooser.getSelectedFile().toString()+".mkt.elements");
                //define o fileChooser com o novo ficheiro
                fileChooser.setSelectedFile(renamed);
            }
            //cria um ficheiro secundarioo para guaradar mais tarde o array de elementos
            renamed2 =new File(fileChooser.getSelectedFile().toString()+".elements");
            System.out.println("File to save: " + fileChooser.getSelectedFile());
            //cria um ficheiro com o contido no fileChooser (=renamed)
            File file = fileChooser.getSelectedFile();
            try {
                //cria e verifica se foi executado com suceso
                if(file.createNewFile()){
                    System.out.println("Ficheiro criado com sucesso.");
                    
                }else{
                    //significa que o ficheiro ja existe e por isso apaga o anterior e cria um novo
                    System.out.println("Ficheiro ja existe");
                    file.delete();
                    file.createNewFile();
                }
                //cria o ficheiro secundario e verifica se foi executado com suceso
                if(renamed2.createNewFile()){
                    System.out.println("Ficheiro criado com sucesso.");
                    
                }else{
                    //significa que o ficheiro ja existe e por isso apaga cria o ficheiro secundario novamente
                    System.out.println("Ficheiro ja existe");
                    file.delete();
                    file.createNewFile();
                }
                //Escreve em formato de objeto no ficheiro principal a arvore
                ObjectIO.writeObject(mt.tree, fileChooser.getSelectedFile().toString());
                //Escreve em formato de objeto no ficheiro secundario os elementos da arvore
                ObjectIO.writeObject(mt.elements, renamed2.getAbsolutePath());
                System.out.println("Ficheiro escrito com sucesso");
            } catch (IOException ex) {
                System.out.println("Ocorreu um erro.");
                
                ex.printStackTrace();
            }
        }
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //cria uma instancia do tipo JFileChooser
        JFileChooser fileChooser = new JFileChooser();
        //cria uma instancia do tipo FileNameExtensionFilter para criar um filtro, e limita para ficheiros do tipo mkt
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Merkel Tree file", "mkt");
        //determina que so sao aceites os ficheiros com o tipo do filtro
        fileChooser.setAcceptAllFileFilterUsed(false);
        //adiciona o filtro ao jFileChooser
        fileChooser.addChoosableFileFilter(filter);
        //abre o jFileChooser
        fileChooser.showOpenDialog(this);
        //guarda na arvore o conteudo do ficheiro principal
        mt.tree=(ArrayList<ArrayList<String>>)ObjectIO.readObject(fileChooser.getSelectedFile().toString());
        //guarda nos elementos o conteudo do ficheiro secundarioo
        mt.elements=(ArrayList<String>) ObjectIO.readObject(fileChooser.getSelectedFile().toString()+".elements");
        System.out.println("File to open: " + fileChooser.getSelectedFile());
        //limpa a area de texto
        jTextPane1.setText("");
        //escreve a arvore no painel de texto
        jTextPane1.setText(mt.show());
        //limpa o model (jList)
        model.removeAllElements();
        //adiciona todos os elementos ao model (jList)
        model.addAll(mt.elements);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jList1MouseClicked

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        //verifica se outro valor foi escolhido
        if(jList1.getSelectedIndex()!=-1){
            //significa que foi
            //coloca o valor escolhido no textField
            jTextField1.setText(jList1.getSelectedValue());
            //requer o foco novamente
            jTextField1.requestFocus();
        }else{
            //significa que nao existe nennhum valor escolhido
            //limpa o textField
            jTextField1.setText("");
        }
    }//GEN-LAST:event_jList1ValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

}
